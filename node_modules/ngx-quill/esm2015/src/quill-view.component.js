import { __decorate, __param } from "tslib";
import { isPlatformServer } from '@angular/common';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
// eslint-disable-next-line @typescript-eslint/no-var-requires
import * as ɵngcc0 from '@angular/core';
const QuillNamespace = require('quill');
import { AfterViewInit, Component, ElementRef, Inject, Input, OnChanges, PLATFORM_ID, Renderer2, SimpleChanges, ViewEncapsulation, NgZone } from '@angular/core';
import { defaultModules } from './quill-defaults';
import { getFormat } from './helpers';
let QuillViewComponent = class QuillViewComponent {
    constructor(platformId, config, renderer, elementRef, zone) {
        this.platformId = platformId;
        this.config = config;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.strict = true;
        this.customModules = [];
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = (quillEditor, value) => {
            const format = getFormat(this.format, this.config.format);
            let content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    ngOnChanges(changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));
        modules.toolbar = false;
        this.customOptions.forEach((customOption) => {
            const newCustomOption = QuillNamespace.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            QuillNamespace.register(newCustomOption, true);
        });
        this.customModules.forEach(({ implementation, path }) => {
            QuillNamespace.register(path, implementation);
        });
        let debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        let formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);
        }
        const theme = this.theme || (this.config.theme ? this.config.theme : 'snow');
        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
        this.zone.runOutsideAngular(() => {
            this.quillEditor = new QuillNamespace(this.editorElem, {
                debug: debug,
                formats: formats,
                modules,
                readOnly: true,
                strict: this.strict,
                theme
            });
        });
        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
        if (this.content) {
            this.valueSetter(this.quillEditor, this.content);
        }
    }
}
QuillViewComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: QuillViewComponent, selectors: [["quill-view"]], factory: function QuillViewComponent_Factory(t) { return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone)); }, inputs: { strict: "strict", customModules: "customModules", customOptions: "customOptions", preserveWhitespace: "preserveWhitespace", format: "format", theme: "theme", modules: "modules", debug: "debug", formats: "formats", content: "content" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], consts: 0, vars: 0, template: function QuillViewComponent_Template(rf, ctx) { }, styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view',
                template: `
`,
                styles: [`
.ql-container.ngx-quill-view {
  border: 0;
}
`]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [Renderer2]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [NgZone]
            }] }]; }, { constructor: [], platformId: [], config: [], renderer: [], elementRef: [], zone: [], strict: [{
            type: Input
        }], customModules: [{
            type: Input
        }], customOptions: [{
            type: Input
        }], preserveWhitespace: [{
            type: Input
        }], valueSetter: [], ngOnChanges: [], ngAfterViewInit: [], editorElem: [], quillEditor: [], format: [{
            type: Input
        }], theme: [{
            type: Input
        }], modules: [{
            type: Input
        }], debug: [{
            type: Input
        }], formats: [{
            type: Input
        }], content: [{
            type: Input
        }] });;
QuillViewComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
];
__decorate([
    Input()
], QuillViewComponent.prototype, "format", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "theme", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "modules", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "debug", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "formats", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "strict", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "content", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "customModules", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "customOptions", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "preserveWhitespace", void 0);
QuillViewComponent = __decorate([
    __param(0, Inject(PLATFORM_ID)),
    __param(1, Inject(QUILL_CONFIG_TOKEN)),
    __param(2, Inject(Renderer2)),
    __param(3, Inject(ElementRef)),
    __param(4, Inject(NgZone))
], QuillViewComponent);
export { QuillViewComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0VsTWFnby9EZXNrdG9wLzE1K9Cf0L7QtNC60LvRjtGH0LXQvdC40LUr0L/Qu9Cw0LPQuNC90LAr0YDQtdC00LDQutGC0L7RgNCwL25vZGVfbW9kdWxlcy9uZ3gtcXVpbGwvZXNtMjAxNS9zcmMvcXVpbGwtdmlldy5jb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Y0FnRkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQXNDZ0MsQUFXMUIiLCJmaWxlIjoicXVpbGwtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlLCBfX3BhcmFtIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFFVSUxMX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IFF1aWxsTmFtZXNwYWNlID0gcmVxdWlyZSgncXVpbGwnKTtcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dCwgT25DaGFuZ2VzLCBQTEFURk9STV9JRCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZWZhdWx0TW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZGVmYXVsdHMnO1xuaW1wb3J0IHsgZ2V0Rm9ybWF0IH0gZnJvbSAnLi9oZWxwZXJzJztcbmxldCBRdWlsbFZpZXdDb21wb25lbnQgPSBjbGFzcyBRdWlsbFZpZXdDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQsIGNvbmZpZywgcmVuZGVyZXIsIGVsZW1lbnRSZWYsIHpvbmUpIHtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybUlkID0gcGxhdGZvcm1JZDtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmID0gZWxlbWVudFJlZjtcbiAgICAgICAgdGhpcy56b25lID0gem9uZTtcbiAgICAgICAgdGhpcy5zdHJpY3QgPSB0cnVlO1xuICAgICAgICB0aGlzLmN1c3RvbU1vZHVsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXN0b21PcHRpb25zID0gW107XG4gICAgICAgIHRoaXMucHJlc2VydmVXaGl0ZXNwYWNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsdWVTZXR0ZXIgPSAocXVpbGxFZGl0b3IsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBnZXRGb3JtYXQodGhpcy5mb3JtYXQsIHRoaXMuY29uZmlnLmZvcm1hdCk7XG4gICAgICAgICAgICBsZXQgY29udGVudCA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2h0bWwnIHx8IGZvcm1hdCA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IHF1aWxsRWRpdG9yLmNsaXBib2FyZC5jb252ZXJ0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gW3sgaW5zZXJ0OiB2YWx1ZSB9XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWlsbEVkaXRvci5zZXRDb250ZW50cyhjb250ZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBpZiAoIXRoaXMucXVpbGxFZGl0b3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlcy5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlU2V0dGVyKHRoaXMucXVpbGxFZGl0b3IsIGNoYW5nZXMuY29udGVudC5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm1vZHVsZXMgfHwgKHRoaXMuY29uZmlnLm1vZHVsZXMgfHwgZGVmYXVsdE1vZHVsZXMpKTtcbiAgICAgICAgbW9kdWxlcy50b29sYmFyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VzdG9tT3B0aW9ucy5mb3JFYWNoKChjdXN0b21PcHRpb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0N1c3RvbU9wdGlvbiA9IFF1aWxsTmFtZXNwYWNlLmltcG9ydChjdXN0b21PcHRpb24uaW1wb3J0KTtcbiAgICAgICAgICAgIG5ld0N1c3RvbU9wdGlvbi53aGl0ZWxpc3QgPSBjdXN0b21PcHRpb24ud2hpdGVsaXN0O1xuICAgICAgICAgICAgUXVpbGxOYW1lc3BhY2UucmVnaXN0ZXIobmV3Q3VzdG9tT3B0aW9uLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3VzdG9tTW9kdWxlcy5mb3JFYWNoKCh7IGltcGxlbWVudGF0aW9uLCBwYXRoIH0pID0+IHtcbiAgICAgICAgICAgIFF1aWxsTmFtZXNwYWNlLnJlZ2lzdGVyKHBhdGgsIGltcGxlbWVudGF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBkZWJ1ZyA9IHRoaXMuZGVidWc7XG4gICAgICAgIGlmICghZGVidWcgJiYgZGVidWcgIT09IGZhbHNlICYmIHRoaXMuY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICBkZWJ1ZyA9IHRoaXMuY29uZmlnLmRlYnVnO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmb3JtYXRzID0gdGhpcy5mb3JtYXRzO1xuICAgICAgICBpZiAoIWZvcm1hdHMgJiYgZm9ybWF0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3JtYXRzID0gdGhpcy5jb25maWcuZm9ybWF0cyA/IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnLmZvcm1hdHMpIDogKHRoaXMuY29uZmlnLmZvcm1hdHMgPT09IG51bGwgPyBudWxsIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aGVtZSA9IHRoaXMudGhlbWUgfHwgKHRoaXMuY29uZmlnLnRoZW1lID8gdGhpcy5jb25maWcudGhlbWUgOiAnc25vdycpO1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCB0aGlzLnByZXNlcnZlV2hpdGVzcGFjZSA/ICc8cHJlIHF1aWxsLXZpZXctZWxlbWVudD48L3ByZT4nIDogJzxkaXYgcXVpbGwtdmlldy1lbGVtZW50PjwvZGl2PicpO1xuICAgICAgICB0aGlzLmVkaXRvckVsZW0gPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbcXVpbGwtdmlldy1lbGVtZW50XScpO1xuICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5xdWlsbEVkaXRvciA9IG5ldyBRdWlsbE5hbWVzcGFjZSh0aGlzLmVkaXRvckVsZW0sIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZzogZGVidWcsXG4gICAgICAgICAgICAgICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICAgICAgICAgICAgICBtb2R1bGVzLFxuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0cmljdDogdGhpcy5zdHJpY3QsXG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVkaXRvckVsZW0sICduZ3gtcXVpbGwtdmlldycpO1xuICAgICAgICBpZiAodGhpcy5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlU2V0dGVyKHRoaXMucXVpbGxFZGl0b3IsIHRoaXMuY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuUXVpbGxWaWV3Q29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtQTEFURk9STV9JRCxdIH1dIH0sXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW1FVSUxMX0NPTkZJR19UT0tFTixdIH1dIH0sXG4gICAgeyB0eXBlOiBSZW5kZXJlcjIsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW1JlbmRlcmVyMixdIH1dIH0sXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtFbGVtZW50UmVmLF0gfV0gfSxcbiAgICB7IHR5cGU6IE5nWm9uZSwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbTmdab25lLF0gfV0gfVxuXTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZm9ybWF0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcInRoZW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcIm1vZHVsZXNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZGVidWdcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZm9ybWF0c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKVxuXSwgUXVpbGxWaWV3Q29tcG9uZW50LnByb3RvdHlwZSwgXCJzdHJpY3RcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiY29udGVudFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKVxuXSwgUXVpbGxWaWV3Q29tcG9uZW50LnByb3RvdHlwZSwgXCJjdXN0b21Nb2R1bGVzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcImN1c3RvbU9wdGlvbnNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwicHJlc2VydmVXaGl0ZXNwYWNlXCIsIHZvaWQgMCk7XG5RdWlsbFZpZXdDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICBDb21wb25lbnQoe1xuICAgICAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgICAgICBzZWxlY3RvcjogJ3F1aWxsLXZpZXcnLFxuICAgICAgICB0ZW1wbGF0ZTogYFxuYCxcbiAgICAgICAgc3R5bGVzOiBbYFxuLnFsLWNvbnRhaW5lci5uZ3gtcXVpbGwtdmlldyB7XG4gIGJvcmRlcjogMDtcbn1cbmBdXG4gICAgfSksXG4gICAgX19wYXJhbSgwLCBJbmplY3QoUExBVEZPUk1fSUQpKSxcbiAgICBfX3BhcmFtKDEsIEluamVjdChRVUlMTF9DT05GSUdfVE9LRU4pKSxcbiAgICBfX3BhcmFtKDIsIEluamVjdChSZW5kZXJlcjIpKSxcbiAgICBfX3BhcmFtKDMsIEluamVjdChFbGVtZW50UmVmKSksXG4gICAgX19wYXJhbSg0LCBJbmplY3QoTmdab25lKSlcbl0sIFF1aWxsVmlld0NvbXBvbmVudCk7XG5leHBvcnQgeyBRdWlsbFZpZXdDb21wb25lbnQgfTtcbiJdfQ==