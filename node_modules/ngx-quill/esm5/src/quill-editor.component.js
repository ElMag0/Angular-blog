import { __decorate, __param, __read, __spread } from "tslib";
import { DOCUMENT, isPlatformServer } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
// eslint-disable-next-line @typescript-eslint/no-var-requires
import * as Éµngcc0 from '@angular/core';

const _c0 = [[["", "quill-editor-toolbar", ""]]];
const _c1 = ["[quill-editor-toolbar]"];
var QuillNamespace = require('quill');
import { AfterViewInit, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnChanges, OnDestroy, Output, PLATFORM_ID, Renderer2, SecurityContext, SimpleChanges, ViewEncapsulation } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { defaultModules } from './quill-defaults';
import { getFormat } from './helpers';
var QuillEditorComponent = /** @class */ (function () {
    function QuillEditorComponent(elementRef, domSanitizer, doc, platformId, renderer, zone, config) {
        var _this = this;
        this.elementRef = elementRef;
        this.domSanitizer = domSanitizer;
        this.doc = doc;
        this.platformId = platformId;
        this.renderer = renderer;
        this.zone = zone;
        this.config = config;
        this.required = false;
        this.customToolbarPosition = 'top';
        this.sanitize = false;
        this.styles = null;
        this.strict = true;
        this.customOptions = [];
        this.customModules = [];
        this.preserveWhitespace = false;
        this.trimOnValidation = false;
        this.onEditorCreated = new EventEmitter();
        this.onEditorChanged = new EventEmitter();
        this.onContentChanged = new EventEmitter();
        this.onSelectionChanged = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.disabled = false; // used to store initial value before ViewInit
        this.valueGetter = function (quillEditor, editorElement) {
            var html = editorElement.querySelector('.ql-editor').innerHTML;
            if (html === '<p><br></p>' || html === '<div><br></div>') {
                html = null;
            }
            var modelValue = html;
            var format = getFormat(_this.format, _this.config.format);
            if (format === 'text') {
                modelValue = quillEditor.getText();
            }
            else if (format === 'object') {
                modelValue = quillEditor.getContents();
            }
            else if (format === 'json') {
                try {
                    modelValue = JSON.stringify(quillEditor.getContents());
                }
                catch (e) {
                    modelValue = quillEditor.getText();
                }
            }
            return modelValue;
        };
        this.valueSetter = function (quillEditor, value) {
            var format = getFormat(_this.format, _this.config.format);
            if (format === 'html') {
                if (_this.sanitize) {
                    value = _this.domSanitizer.sanitize(SecurityContext.HTML, value);
                }
                return quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    return JSON.parse(value);
                }
                catch (e) {
                    return [{ insert: value }];
                }
            }
            return value;
        };
        this.selectionChangeHandler = function (range, oldRange, source) {
            var shouldTriggerOnModelTouched = !range && _this.onModelTouched;
            // only emit changes when there's any listener
            if (!_this.onBlur.observers.length &&
                !_this.onFocus.observers.length &&
                !_this.onSelectionChanged.observers.length &&
                !shouldTriggerOnModelTouched) {
                return;
            }
            _this.zone.run(function () {
                if (range === null) {
                    _this.onBlur.emit({
                        editor: _this.quillEditor,
                        source: source
                    });
                }
                else if (oldRange === null) {
                    _this.onFocus.emit({
                        editor: _this.quillEditor,
                        source: source
                    });
                }
                _this.onSelectionChanged.emit({
                    editor: _this.quillEditor,
                    oldRange: oldRange,
                    range: range,
                    source: source
                });
                if (shouldTriggerOnModelTouched) {
                    _this.onModelTouched();
                }
            });
        };
        this.textChangeHandler = function (delta, oldDelta, source) {
            // only emit changes emitted by user interactions
            var text = _this.quillEditor.getText();
            var content = _this.quillEditor.getContents();
            var html = _this.editorElem.querySelector('.ql-editor').innerHTML;
            if (html === '<p><br></p>' || html === '<div><br></div>') {
                html = null;
            }
            var trackChanges = _this.trackChanges || _this.config.trackChanges;
            var shouldTriggerOnModelChange = (source === QuillNamespace['sources'].USER || trackChanges && trackChanges === 'all') && _this.onModelChange;
            // only emit changes when there's any listener
            if (!_this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {
                return;
            }
            _this.zone.run(function () {
                if (shouldTriggerOnModelChange) {
                    _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));
                }
                _this.onContentChanged.emit({
                    content: content,
                    delta: delta,
                    editor: _this.quillEditor,
                    html: html,
                    oldDelta: oldDelta,
                    source: source,
                    text: text
                });
            });
        };
        this.editorChangeHandler = function (event, current, old, source) {
            // only emit changes when there's any listener
            if (!_this.onEditorChanged.observers.length) {
                return;
            }
            // only emit changes emitted by user interactions
            if (event === 'text-change') {
                var text_1 = _this.quillEditor.getText();
                var content_1 = _this.quillEditor.getContents();
                var html_1 = _this.editorElem.querySelector('.ql-editor').innerHTML;
                if (html_1 === '<p><br></p>' || html_1 === '<div><br></div>') {
                    html_1 = null;
                }
                _this.zone.run(function () {
                    _this.onEditorChanged.emit({
                        content: content_1,
                        delta: current,
                        editor: _this.quillEditor,
                        event: event,
                        html: html_1,
                        oldDelta: old,
                        source: source,
                        text: text_1
                    });
                });
            }
            else {
                _this.onEditorChanged.emit({
                    editor: _this.quillEditor,
                    event: event,
                    oldRange: old,
                    range: current,
                    source: source
                });
            }
        };
    }
    QuillEditorComponent_1 = QuillEditorComponent;
    QuillEditorComponent.normalizeClassNames = function (classes) {
        var classList = classes.trim().split(' ');
        return classList.reduce(function (prev, cur) {
            var trimmed = cur.trim();
            if (trimmed) {
                prev.push(trimmed);
            }
            return prev;
        }, []);
    };
    QuillEditorComponent.prototype.onModelChange = function (_modelValue) { };
    QuillEditorComponent.prototype.onModelTouched = function () { };
    QuillEditorComponent.prototype.onValidatorChanged = function () { };
    QuillEditorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');
        var toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');
        var modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));
        if (toolbarElem) {
            modules.toolbar = toolbarElem;
        }
        else if (modules.toolbar === undefined) {
            modules.toolbar = defaultModules.toolbar;
        }
        var placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;
        if (placeholder === undefined) {
            placeholder = 'Insert text here ...';
        }
        if (this.styles) {
            Object.keys(this.styles).forEach(function (key) {
                _this.renderer.setStyle(_this.editorElem, key, _this.styles[key]);
            });
        }
        if (this.classes) {
            this.addClasses(this.classes);
        }
        this.customOptions.forEach(function (customOption) {
            var newCustomOption = QuillNamespace.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            QuillNamespace.register(newCustomOption, true);
        });
        this.customModules.forEach(function (_a) {
            var implementation = _a.implementation, path = _a.path;
            QuillNamespace.register(path, implementation);
        });
        var bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;
        if (!bounds) {
            bounds = this.config.bounds ? this.config.bounds : this.doc.body;
        }
        var debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        var readOnly = this.readOnly;
        if (!readOnly && this.readOnly !== false) {
            readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;
        }
        var scrollingContainer = this.scrollingContainer;
        if (!scrollingContainer && this.scrollingContainer !== null) {
            scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null;
        }
        var formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats ? __spread(this.config.formats) : (this.config.formats === null ? null : undefined);
        }
        this.zone.runOutsideAngular(function () {
            _this.quillEditor = new QuillNamespace(_this.editorElem, {
                bounds: bounds,
                debug: debug,
                formats: formats,
                modules: modules,
                placeholder: placeholder,
                readOnly: readOnly,
                scrollingContainer: scrollingContainer,
                strict: _this.strict,
                theme: _this.theme || (_this.config.theme ? _this.config.theme : 'snow')
            });
        });
        if (this.content) {
            var format = getFormat(this.format, this.config.format);
            if (format === 'object') {
                this.quillEditor.setContents(this.content, 'silent');
            }
            else if (format === 'text') {
                this.quillEditor.setText(this.content, 'silent');
            }
            else if (format === 'json') {
                try {
                    this.quillEditor.setContents(JSON.parse(this.content), 'silent');
                }
                catch (e) {
                    this.quillEditor.setText(this.content, 'silent');
                }
            }
            else {
                if (this.sanitize) {
                    this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);
                }
                var contents = this.quillEditor.clipboard.convert(this.content);
                this.quillEditor.setContents(contents, 'silent');
            }
            this.quillEditor.getModule('history').clear();
        }
        // initialize disabled status based on this.disabled as default value
        this.setDisabledState();
        // triggered if selection or text changed
        this.quillEditor.on('editor-change', this.editorChangeHandler);
        // mark model as touched if editor lost focus
        this.quillEditor.on('selection-change', this.selectionChangeHandler);
        // update model if text changes
        this.quillEditor.on('text-change', this.textChangeHandler);
        // trigger created in a timeout to avoid changed models after checked
        // if you are using the editor api in created output to change the editor content
        setTimeout(function () {
            _this.onValidatorChanged();
            _this.onEditorCreated.emit(_this.quillEditor);
        });
    };
    QuillEditorComponent.prototype.ngOnDestroy = function () {
        if (this.quillEditor) {
            this.quillEditor.off('selection-change', this.selectionChangeHandler);
            this.quillEditor.off('text-change', this.textChangeHandler);
            this.quillEditor.off('editor-change', this.editorChangeHandler);
        }
    };
    QuillEditorComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (!this.quillEditor) {
            return;
        }
        // tslint:disable:no-string-literal
        if (changes['readOnly']) {
            this.quillEditor.enable(!changes['readOnly'].currentValue);
        }
        if (changes['placeholder']) {
            this.quillEditor.root.dataset.placeholder =
                changes['placeholder'].currentValue;
        }
        if (changes['styles']) {
            var currentStyling = changes['styles'].currentValue;
            var previousStyling = changes['styles'].previousValue;
            if (previousStyling) {
                Object.keys(previousStyling).forEach(function (key) {
                    _this.renderer.removeStyle(_this.editorElem, key);
                });
            }
            if (currentStyling) {
                Object.keys(currentStyling).forEach(function (key) {
                    _this.renderer.setStyle(_this.editorElem, key, _this.styles[key]);
                });
            }
        }
        if (changes['classes']) {
            var currentClasses = changes['classes'].currentValue;
            var previousClasses = changes['classes'].previousValue;
            if (previousClasses) {
                this.removeClasses(previousClasses);
            }
            if (currentClasses) {
                this.addClasses(currentClasses);
            }
        }
        // tslint:enable:no-string-literal
    };
    QuillEditorComponent.prototype.addClasses = function (classList) {
        var _this = this;
        QuillEditorComponent_1.normalizeClassNames(classList).forEach(function (c) {
            _this.renderer.addClass(_this.editorElem, c);
        });
    };
    QuillEditorComponent.prototype.removeClasses = function (classList) {
        var _this = this;
        QuillEditorComponent_1.normalizeClassNames(classList).forEach(function (c) {
            _this.renderer.removeClass(_this.editorElem, c);
        });
    };
    QuillEditorComponent.prototype.writeValue = function (currentValue) {
        this.content = currentValue;
        var format = getFormat(this.format, this.config.format);
        if (this.quillEditor) {
            if (currentValue) {
                if (format === 'text') {
                    this.quillEditor.setText(currentValue);
                }
                else {
                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));
                }
                return;
            }
            this.quillEditor.setText('');
        }
    };
    QuillEditorComponent.prototype.setDisabledState = function (isDisabled) {
        if (isDisabled === void 0) { isDisabled = this.disabled; }
        // store initial value to set appropriate disabled status after ViewInit
        this.disabled = isDisabled;
        if (this.quillEditor) {
            if (isDisabled) {
                this.quillEditor.disable();
                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');
            }
            else {
                if (!this.readOnly) {
                    this.quillEditor.enable();
                }
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
            }
        }
    };
    QuillEditorComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    QuillEditorComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    QuillEditorComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChanged = fn;
    };
    QuillEditorComponent.prototype.validate = function () {
        if (!this.quillEditor) {
            return null;
        }
        var err = {};
        var valid = true;
        var text = this.quillEditor.getText();
        // trim text if wanted + handle special case that an empty editor contains a new line
        var textLength = this.trimOnValidation ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1);
        if (this.minLength && textLength && textLength < this.minLength) {
            err.minLengthError = {
                given: textLength,
                minLength: this.minLength
            };
            valid = false;
        }
        if (this.maxLength && textLength > this.maxLength) {
            err.maxLengthError = {
                given: textLength,
                maxLength: this.maxLength
            };
            valid = false;
        }
        if (this.required && !textLength) {
            err.requiredError = {
                empty: true
            };
            valid = false;
        }
        return valid ? null : err;
    };
    var QuillEditorComponent_1;
    QuillEditorComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "modules", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "debug", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "readOnly", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "maxLength", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "minLength", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "required", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "formats", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "customToolbarPosition", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "sanitize", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "styles", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "strict", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "scrollingContainer", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "bounds", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "customOptions", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "customModules", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "trackChanges", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "preserveWhitespace", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "classes", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "trimOnValidation", void 0);
    __decorate([
        Output()
    ], QuillEditorComponent.prototype, "onEditorCreated", void 0);
    __decorate([
        Output()
    ], QuillEditorComponent.prototype, "onEditorChanged", void 0);
    __decorate([
        Output()
    ], QuillEditorComponent.prototype, "onContentChanged", void 0);
    __decorate([
        Output()
    ], QuillEditorComponent.prototype, "onSelectionChanged", void 0);
    __decorate([
        Output()
    ], QuillEditorComponent.prototype, "onFocus", void 0);
    __decorate([
        Output()
    ], QuillEditorComponent.prototype, "onBlur", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "valueGetter", void 0);
    __decorate([
        Input()
    ], QuillEditorComponent.prototype, "valueSetter", void 0);
    QuillEditorComponent = QuillEditorComponent_1 = __decorate([
        __param(0, Inject(ElementRef)),
        __param(1, Inject(DomSanitizer)),
        __param(2, Inject(DOCUMENT)),
        __param(3, Inject(PLATFORM_ID)),
        __param(4, Inject(Renderer2)),
        __param(5, Inject(NgZone)),
        __param(6, Inject(QUILL_CONFIG_TOKEN))
    ], QuillEditorComponent);
QuillEditorComponent.ngComponentDef = Éµngcc0.ÉµÉµdefineComponent({ type: QuillEditorComponent, selectors: [["quill-editor"]], factory: function QuillEditorComponent_Factory(t) { return new (t || QuillEditorComponent)(Éµngcc0.ÉµÉµdirectiveInject(ElementRef), Éµngcc0.ÉµÉµdirectiveInject(DomSanitizer), Éµngcc0.ÉµÉµdirectiveInject(DOCUMENT), Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID), Éµngcc0.ÉµÉµdirectiveInject(Renderer2), Éµngcc0.ÉµÉµdirectiveInject(NgZone), Éµngcc0.ÉµÉµdirectiveInject(QUILL_CONFIG_TOKEN)); }, inputs: { required: "required", customToolbarPosition: "customToolbarPosition", sanitize: "sanitize", styles: "styles", strict: "strict", customOptions: "customOptions", customModules: "customModules", preserveWhitespace: "preserveWhitespace", trimOnValidation: "trimOnValidation", valueGetter: "valueGetter", valueSetter: "valueSetter", format: "format", theme: "theme", modules: "modules", debug: "debug", readOnly: "readOnly", placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", formats: "formats", scrollingContainer: "scrollingContainer", bounds: "bounds", trackChanges: "trackChanges", classes: "classes" }, outputs: { onEditorCreated: "onEditorCreated", onEditorChanged: "onEditorChanged", onContentChanged: "onContentChanged", onSelectionChanged: "onSelectionChanged", onFocus: "onFocus", onBlur: "onBlur" }, features: [Éµngcc0.ÉµÉµProvidersFeature([
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                useExisting: forwardRef(function () { return QuillEditorComponent_1; })
            },
            {
                multi: true,
                provide: NG_VALIDATORS,
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                useExisting: forwardRef(function () { return QuillEditorComponent_1; })
            }
        ]), Éµngcc0.ÉµÉµNgOnChangesFeature()], ngContentSelectors: _c1, consts: 1, vars: 0, template: function QuillEditorComponent_Template(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµprojectionDef(_c0);
        Éµngcc0.ÉµÉµprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ Éµngcc0.ÉµsetClassMetadata(QuillEditorComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        // eslint-disable-next-line @typescript-eslint/no-use-before-define
                        useExisting: forwardRef(function () { return QuillEditorComponent_1; })
                    },
                    {
                        multi: true,
                        provide: NG_VALIDATORS,
                        // eslint-disable-next-line @typescript-eslint/no-use-before-define
                        useExisting: forwardRef(function () { return QuillEditorComponent_1; })
                    }
                ],
                selector: 'quill-editor',
                template: "\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n"
            }]
    }], function () { return [{ type: ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: DomSanitizer, decorators: [{
                type: Inject,
                args: [DomSanitizer]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: Renderer2, decorators: [{
                type: Inject,
                args: [Renderer2]
            }] }, { type: NgZone, decorators: [{
                type: Inject,
                args: [NgZone]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, { elementRef: [], domSanitizer: [], doc: [], platformId: [], renderer: [], zone: [], config: [], required: [{
            type: Input
        }], customToolbarPosition: [{
            type: Input
        }], sanitize: [{
            type: Input
        }], styles: [{
            type: Input
        }], strict: [{
            type: Input
        }], customOptions: [{
            type: Input
        }], customModules: [{
            type: Input
        }], preserveWhitespace: [{
            type: Input
        }], trimOnValidation: [{
            type: Input
        }], onEditorCreated: [{
            type: Output
        }], onEditorChanged: [{
            type: Output
        }], onContentChanged: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], onBlur: [{
            type: Output
        }], disabled: [], valueGetter: [{
            type: Input
        }], valueSetter: [{
            type: Input
        }], selectionChangeHandler: [], textChangeHandler: [], editorChangeHandler: [], onModelChange: [], onModelTouched: [], onValidatorChanged: [], ngAfterViewInit: [], editorElem: [], content: [], ngOnDestroy: [], ngOnChanges: [], addClasses: [], removeClasses: [], writeValue: [], setDisabledState: [], registerOnChange: [], registerOnTouched: [], registerOnValidatorChange: [], validate: [], format: [{
            type: Input
        }], theme: [{
            type: Input
        }], modules: [{
            type: Input
        }], debug: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], maxLength: [{
            type: Input
        }], minLength: [{
            type: Input
        }], formats: [{
            type: Input
        }], scrollingContainer: [{
            type: Input
        }], bounds: [{
            type: Input
        }], trackChanges: [{
            type: Input
        }], classes: [{
            type: Input
        }] });
    return QuillEditorComponent;
}());
export { QuillEditorComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,